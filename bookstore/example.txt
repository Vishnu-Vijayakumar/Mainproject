        <div><br><br><b>Recommended Books</b></div>
<style>
  .card {
    display: inline-flex; /* change display to inline-flex */
    flex-direction: column; /* set flex-direction to column to stack title and author */
    align-items: center;
    padding: 10px;
    margin: 10px;
    border: 1px solid #ddd;
    box-shadow: 0px 0px 5px #ddd;
    width: 45%; /* set width to 45% to display two cards in a row */
  }

  .card-img {
    width: 100%; /* set width to 100% to take up the full width of the card */
    height: 200px;
    margin-right: 10px;
  }

  .card-img img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  .card-body {
    flex: 1;
  }

  .card-title {
    font-size: 20px;
    font-weight: bold;
    margin: 0;
  }

  .card-author {
    font-size: 16px;
    margin: 0;
  }

  .slider-track {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; /* add justify-content to create some space between cards */
  }
</style>

<div class="recommendation-container">
  <div class="slider-container">
    <div class="slider-track">
    <?php
    $category = $pcategory; // example category
    $url = 'http://localhost:5000/recommend_books';
    $data = array('category' => $category);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($ch);
    curl_close($ch);

    if ($response != null && !empty($response)) {
        $data_arr = json_decode($response);

        foreach ($data_arr as $book) {
            echo '<div class="card">
                <div class="card-body">
                    <h5 class="card-title">'.$book->title.'</h5>
                    <p class="card-author">'.$book->author.'</p>
                </div>
                <div class="card-img">
                    <img src="'.$book->image.'" alt="'.$book->title.'" class="img-fluid">
                </div>
            </div>';
        }
    } else {
        echo "No books found";
    }
?>
    </div>
  </div>
</div>




import csv
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from flask import Flask, request, jsonify

# Load the book data from a CSV file
with open('main_dataset.csv', newline='') as f:
    reader = csv.DictReader(f)
    books = [row for row in reader]

# Create a dictionary to store books by category
books_by_category = {}
for book in books:
    if book['category'] not in books_by_category:
        books_by_category[book['category']] = []
    books_by_category[book['category']].append(book)

# Create a KNN model for each category
knn_models = {}
for category, category_books in books_by_category.items():
    X = np.array([[float(book['rating']) if 'rating' in book else 0,
                   len(book['author'].split(','))] for book in category_books])
    y = np.array([book['name'] for book in category_books])
    knn = KNeighborsClassifier(n_neighbors=5, algorithm='auto')
    knn.fit(X, y)
    knn_models[category] = knn

# Initialize a Flask app
app = Flask(__name__)

# Define a route to handle book recommendation requests
@app.route('/recommend_books', methods=['POST'])
def recommend_books():
    category = request.form['category']
    
    # Find the 5 closest books in the same category
    knn = knn_models[category]
    category_books = books_by_category[category]
    X = np.array([[float(book['rating']) if 'rating' in book else 0,
                   len(book['author'].split(','))] for book in category_books])
    y = np.array([book['name'] for book in category_books])
    indices = knn.kneighbors(X)[1]
    similar_books = [category_books[i] for i in indices.flatten()[1:6]]
    
    # Return the recommended books
    return jsonify([{'title': book['name'], 'author': book['author'], 'image': book['image']} for book in similar_books])

if __name__ == '__main__':
    app.run(debug=True)
